// Ejercicio sacar la suma de pares e impares de un rango:

def suma_pares_impares(a:Int, b:Int): Unit = {
  var pares = 0
  var impares = 0
  
  for (i <- a to b) {
    if (i % 2 ==0) {
      pares += i }
    else {
    impares += i }
    }
    
  println(s"La suma de los pares es $pares")
  println(s"La suma de los impares es $impares")
}

suma_pares_impares(1,10)


// Ejercicio: ver si un nÃºmero es primo
import scala.math.sqrt

def esPrimo2(a: Int): Unit = {
  var primo = "si"
  for (i <- 2 to math.sqrt(a).toInt) {
    if (a % i == 0) {
      primo = "no"
    }
  }
  println(s"El nÃºmero $a $primo es primo")
}

esPrimo2(11)



object StringUtils:
  def truncate(s: String, length: Int): String = s.take(length)
  def containsWhitespace(s: String): Boolean = s.matches(".*\\s.*")
  def isNullOrEmpty(s: String): Boolean = s == null || s.trim.isEmpty
 
StringUtils.truncate("Jorge Lopez", 5)
 
import StringUtils.*
 
truncate("Jorge Lopez", 5)
containsWhitespace("Jorge Lopez")
isNullOrEmpty("Jorge Lopez")
 
object constantesmatematicas:
  val PI = 3.14159
  val E = 2.71
 
println(constantesmatematicas.PI)
 
object calculadora:
  def sumar(num1:Int ,num2:Int): Int= num1+num2
  def restar(num1:Int ,num2:Int): Int= num1-num2
  def multiplicar(num1:Int ,num2:Int): Int= num1*num2
  def dividir(num1:Double ,num2:Double): Double = num1/num2
println(calculadora.sumar(7,9))
println(calculadora.restar(7,9))
println(calculadora.multiplicar(7,9))
println(calculadora.dividir(7,9))
 
import scala.math.*
 
class Circulo(val radio: Double):
  def area: Double = Circulo.calculararea(radio)
 
object Circulo:
  private def calculararea(radio : Double): Double = Pi*pow(radio, 2)
 
val circulo = Circulo(5)
circulo.area
 
trait Tienepatas:
  var numerodepatas: Int
  def caminar(): Unit
  def stop() = println("Paro de andar")
 
trait Tienecola:
  var colorcola: String
  def movercola() : Unit
  def pararcola() = println("Paro la cola")
class Perro (nombre: String) extends Tienepatas, Tienecola:
  var numerodepatas = 4
  var colorcola = "Negro"
  def movercola() = println("Muevo la cola")
  def caminar() = println("Estoy caminando")
 
val perro = Perro("Pitbull")
 
perro.caminar()
perro.stop()
perro.colorcola = "azul"
 
enum Color: 
  case Azul, Negro, Rosa, Verde
 
val rosa = Color.Rosa
 
println(Color.fromOrdinal(1))
 
enum Planet(mass: Double, radius: Double):
  private final val G = 6.67300E-11
  def surfaceGravity = G * mass / (radius * radius)
  def surfaceWeight(otherMass: Double) = otherMass * surfaceGravity
 
  case Mercury extends Planet(3.303e+23, 2.4397e6)
  case Venus   extends Planet(4.869e+24, 6.0518e6)
  case Earth   extends Planet(5.976e+24, 6.37814e6)
  case Mars    extends Planet(6.421e+23, 3.3972e6)
  case Jupiter extends Planet(1.9e+27,   7.1492e7)
  case Saturn  extends Planet(5.688e+26, 6.0268e7)
  case Uranus  extends Planet(8.686e+25, 2.5559e7)
  case Neptune extends Planet(1.024e+26, 2.4746e7)
end Planet
 
val Mercurio = Planet.Mercury
Mercurio.surfaceWeight(5)
 
case class Persona(nombre: String, edad: Int)
 
// Uso de la case class Persona
val persona = Persona("Juan", 30)
println(persona.nombre) // Imprime "Juan"
println(persona.edad)   // Imprime 30
 
persona.nombre = "Jose"

// Mi calculadora
object calculadora {
      def suma(a: Float, b:Float): Unit = {
            println(a+b)
      }
      def resta(a: Float, b:Float): Unit = {
            println(a-b)
      }
      def multiplicar(a: Float, b:Float): Unit = {
            println(a*b)
      }
      def dividir(a: Float, b:Float): Unit = {
            println(a/b)
      }
}

calculadora.dividir(6,5)

